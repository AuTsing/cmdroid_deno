name: Build

on:
    push:
        tags:
            - v*

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout cmdroid_deno
              uses: actions/checkout@v4

            - name: Get version
              id: get_version
              run: |
                  version=$(cat ./README.md | grep -oP 'v\d+\.\d+\.\d+')
                  echo "version=$version" >> $GITHUB_OUTPUT

            - name: Checkout deno
              uses: actions/checkout@v4
              with:
                  repository: denoland/deno
                  ref: ${{ steps.get_version.outputs.version }}
                  fetch-depth: 10
                  submodules: recursive
                  path: assets/deno

            - name: Install rust
              uses: dsherret/rust-toolchain-file@v1

            - name: Install ndk
              id: install-ndk
              uses: nttld/setup-ndk@v1
              with:
                  ndk-version: r26d
                  add-to-path: false

            - name: Install python
              uses: actions/setup-python@v4
              with:
                  python-version: 3.11.x
                  architecture: x64

            - name: Install protobuf
              run: |
                  sudo apt update
                  sudo apt install -yq --no-install-suggests --no-install-recommends \
                    protobuf-compiler

            - name: Install cross compilation toolchain
              run: |
                  rustup target add aarch64-linux-android

            - name: Download assets
              uses: robinraju/release-downloader@v1
              with:
                  repository: AuTsing/deno_snapshot_builder_qemu
                  tag: ${{ steps.get_version.outputs.version }}
                  out-file-path: assets/deno_snapshot
                  fileName: '*.bin'

            - name: Patch src
              run: |
                  pwd
                  ls
                  echo $GITHUB_WORKSPACE
                  git apply patches/cli_build.rs.patch

            - name: Cache rust
              uses: Swatinem/rust-cache@v2

            - name: Build
              run: cargo build --target aarch64-linux-android --release
              env:
                  ANDROID_NDK_ROOT: ${{ steps.install-ndk.outputs.ndk-path }}
                  CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER: ${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android28-clang
                  CC_aarch64_linux_android: ${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android28-clang
                  AR_aarch64_linux_android: ${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar
                  RUSTY_V8_MIRROR: https://github.com/AuTsing/rusty_v8_builder/releases/download
                  DENO_SKIP_CROSS_BUILD_CHECK: 1

            - name: Release
              uses: softprops/action-gh-release@v2
              with:
                  files: ./target/aarch64-linux-android/release/cmdroid_deno
